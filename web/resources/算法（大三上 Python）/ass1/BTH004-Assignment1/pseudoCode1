def greedyForMultipleKnapsack_firstFit(knapsacks,items):

    valuesPerUnit = [] 
    leftCapacity = knapsacks.copy() 

    for i in range(len(items)): 
        valuesPerUnit.append([items[i][0]/items[i][1],i])
    
    #sort the array by the order of value per unit
    totalValue = 0 
    for i in range(len(items)): 
        for j in range(len(knapsacks)): 
            #if find the knapsack with enough space:
                #include the item in this knapsack,add the value to the total value and reduce the knapsack space.
    return items,totalValue

def greedyForMultipleKnapsack_bestFit(knapsacks,items):
    valuesPerUnit = [] 
    leftCapacity = knapsacks.copy() 
    for i in range(len(items)): 
        valuesPerUnit.append([items[i][0]/items[i][1],i])
    #sort the array by the order of value per unit 

    totalValue = 0 
    for i in range(len(items)): 
        knapIndex = -1 
        for j in range(len(knapsacks)): 
            #find the knapsack who have closest space for current item,
        if knapIndex != -1:
            totalValue += items[valuesPerUnit[i][1]][0] 
            leftCapacity[knapIndex] -= items[valuesPerUnit[i][1]][1] 
        items[valuesPerUnit[i][1]][2] = knapIndex
        
    return items,totalValue